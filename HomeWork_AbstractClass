import random
from abc import abstractmethod, ABC


class AnimeMon(ABC):

    def __init__(self, name: str, poketype: str):
        self.name = name
        self.poketype = poketype
        self.exp = 0

    @classmethod
    @abstractmethod
    def inc_exp(self, value: int):
        self.exp += value * 8

    @property
    @abstractmethod
    def exp(self):
        return self.exp


class Pokemon(AnimeMon):
    def __init__(self, name: str, poketype: str):
        self.name = name
        self.poketype = poketype
        self._exp = 0

    def to_str(self):
        return f'{self.name}/{self.poketype}'

    @property
    def exp(self):
        return self._exp

    def inc_exp(self, value: int):
        self._exp += value * 8


class Digimon(AnimeMon):
    def __init__(self, name: str, digtype: str):
        self.name = name
        self.digtype = digtype
        self._exp = 0

    def to_str(self):
        return f'{self.name}/{self.digtype}'

    @property
    def exp(self):
        return self._exp

    def inc_exp(self, value: int):
        self._exp += value * 16


def train(animemon: AnimeMon):
    step_size, level_size = 10, 100
    sparring_qty = (level_size - animemon.exp % level_size) // step_size
    for i in range(sparring_qty):
        win = random.choice([True, False])
        if win:
            animemon.inc_exp(step_size)


if __name__ == '__main__':
    Pokemon1 = Pokemon('Pikachu', 'water')
    Pokemon2 = Pokemon('Qertans', 'fire')
    Digimon1 = Digimon('Digaras', 'Digimon')
    Digimon2 = Digimon('Digafil', 'Digimon')
    train(Pokemon1)
    print(f'{Pokemon1.name} натренирован с опытом: {Pokemon1.exp}')
    train(Digimon1)
    print(f'{Digimon1.name} натренирован с опытом: {Digimon1.exp}')
